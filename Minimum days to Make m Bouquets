class Solution {
public:
    // Helper function to check if we can make 'm' bouquets in 'day' days
    bool possible(vector<int> &bloomDay, int day, int m, int k) {
        int cnt = 0, noOfB = 0;
        for (int i = 0; i < bloomDay.size(); i++) {
            if (bloomDay[i] <= day) {
                cnt++;
                if (cnt == k) {  // We found a valid bouquet
                    noOfB++;
                    cnt = 0;  // Reset count for next bouquet
                }
            } else {
                cnt = 0;  // Reset count if flower is not bloomed
            }
        }
        return noOfB >= m;
    }

    // Function to find the minimum number of days to make 'm' bouquets
    int minDays(vector<int>& bloomDay, int m, int k) {
        long long val = 1LL * m * k;
        if (val > bloomDay.size()) return -1;  // Not enough flowers

        int mini = *min_element(bloomDay.begin(), bloomDay.end());
        int maxi = *max_element(bloomDay.begin(), bloomDay.end());

        int low = mini, high = maxi;
        while (low < high) {  // Use "<" instead of "<=" for efficiency
            int mid = low + (high - low) / 2;
            if (possible(bloomDay, mid, m, k)) {
                high = mid;  // Reduce days to find minimum valid day
            } else {
                low = mid + 1;  // Increase days
            }
        }
        return low;
    }
};
