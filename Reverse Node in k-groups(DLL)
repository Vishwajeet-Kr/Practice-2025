class Solution {
public:

    ListNode* reverseLinkedList(ListNode* head) {
    ListNode* prev = nullptr;
    ListNode* curr = head;
    while (curr != nullptr) {
        ListNode* next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
    ListNode* getKthNode(ListNode* temp, int k){
        k-= 1;
        while(temp!=nullptr && k>0){
            k--;
            temp = temp->next;
        }
        return temp;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp = head;
        ListNode* prevLast = NULL;
        while(temp != nullptr){
            ListNode* kThNode = getKthNode(temp, k);
            if(kThNode == nullptr){
                if(prevLast) prevLast->next = temp;
                break;
            }

            ListNode* nextNode = kThNode->next;
            kThNode->next = NULL;
            reverseLinkedList(temp);
            if(temp == head){
                head = kThNode;
            } else{
                prevLast->next = kThNode;
            }

            prevLast = temp;
            temp = nextNode;
        }
        return head;
    }
};
