class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        const int MOD = 1e9 + 7;

        vector<int> left(n), right(n);

        // Previous Smaller Element (strictly smaller)
        stack<int> st1;
        for (int i = 0; i < n; i++) {
            while (!st1.empty() && arr[st1.top()] > arr[i]) 
                st1.pop();
            left[i] = st1.empty() ? i + 1 : i - st1.top();
            st1.push(i);
        }

        // Next Smaller Element (smaller OR equal)
        stack<int> st2;
        for (int i = n - 1; i >= 0; i--) {
            while (!st2.empty() && arr[st2.top()] >= arr[i]) 
                st2.pop();
            right[i] = st2.empty() ? n - i : st2.top() - i;
            st2.push(i);
        }

        // Contribution sum
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            long long contrib = (1LL * arr[i] * left[i] * right[i]) % MOD;
            ans = (ans + contrib) % MOD;
        }

        return (int)ans;
    }
};
